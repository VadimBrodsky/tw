created: 20141119115335754
modified: 20141119121012800
tags: Rails Rails-Active-Record
title: ActiveRecord: Create: New/Save
type: text/vnd.tiddlywiki

Creating new objects that will add new records to the database.

!! New
* Instantiate an object from the model class, using the `new` method.

```ruby
article = Article.new
#=> #<Article id: nil, title: nil, body: nil, published_at: nil, created_at: nil, updated_at: nil, excerpt: nil, location: nil>
```

* To check the attributes of the object use `attributes` method returns a hash.
* To see if the object was not saved yet use the `new_record?` method.

```ruby
article.new_record?
#=> true
article.attributes
#=> {"body"=>nil, "created_at"=>nil, "excerpt"=>nil, "location"=>nil, "published_at"=>nil, "title"=>nil, "updated_at"=>nil}
article
#=> #<Article id: nil, title: nil, body: nil, published_at: nil, created_at: nil, updated_at: nil, excerpt: nil, location: nil>
```

!! Set Values
* To add data to the object use the attribute accessor methods (inherited from the [[ActiveRecord::Base]] class).

```ruby
article.title = 'RailsConf'
article.body = 'RailsConf is the official gathering for Rails developers..'
article.published_at = '2013-04-13'
```

!! Save
* To save the object in the database use the `save` method. 
* It returns `true` for success and `false` for failure.
* Will output the SQL statement that it uses with the database.
* If the object has not changed since last save, it will return true but without generating SQL or hitting the database.

```ruby
article.save
```

!! New with Parameters
* The above can be done in fewer lines.
* Passing a hash of attributes to the `new` method of the object.

```ruby
article = Article.new(:title => "Introduction to Active Record", :body => "Active Record is Rails...", :published_at => Date.today)
article.save
```